//
//  CLLockVC.m
//  CoreLock
//
//  Created by 成林 on 15/4/21.
//  Copyright (c) 2015年 冯成林. All rights reserved.
//

#import "CLLockVC.h"
#import "CoreLockConst.h"
#import "CLLockLabel.h"
#import "CLLockNavVC.h"
#import "CLLockView.h"
#import "NotificationNameDefine.h"


@interface CLLockVC ()

/** 操作成功：密码设置成功、密码验证成功 */
@property (nonatomic,copy) void (^successBlock)(CLLockVC *lockVC,NSString *pwd);

@property (nonatomic,copy) void (^forgetPwdBlock)(CLLockVC *lockVC);

@property (nonatomic,copy) void (^achieveErrorLimitBlock)(CLLockVC *lockVC);

@property (weak, nonatomic) IBOutlet CLLockLabel *label;

@property (nonatomic,copy) NSString *msg;

@property (weak, nonatomic) IBOutlet CLLockView *lockView;

@property (nonatomic,weak) UIViewController *vc;

@property (nonatomic,strong) UIBarButtonItem *resetItem;


@property (nonatomic,copy) NSString *modifyCurrentTitle;


@property (weak, nonatomic) IBOutlet UIView *actionView;

@property (weak, nonatomic) IBOutlet UIButton *modifyBtn;

@property (nonatomic,assign) BOOL isShowNavClose;



/** 直接进入修改页面的 */
@property (nonatomic,assign) BOOL isDirectModify;



@end

@implementation CLLockVC

- (void)viewDidLoad {
    
    [super viewDidLoad];

    //控制器准备
    [self vcPrepare];
    
    //数据传输
    [self dataTransfer];
    
    //事件
    [self event];
}


/*
 *  事件
 */
-(void)event{
    
    
    /*
     *  设置密码
     */
    
    /** 开始输入：第一次 */
    self.lockView.setPWBeginBlock = ^(){
        
        [self.label showNormalMsg:CoreLockPWDTitleFirst];
    };
    
    /** 开始输入：确认 */
    self.lockView.setPWConfirmlock = ^(){
        
        [self.label showNormalMsg:CoreLockPWDTitleConfirm];
    };
    
    
    /** 密码长度不够 */
    self.lockView.setPWSErrorLengthTooShortBlock = ^(NSUInteger currentCount){
      
        [self.label showWarnMsg:[NSString stringWithFormat:@"请连接至少%@个点",@(CoreLockMinItemCount)]];
    };
    
    /** 两次密码不一致 */
    self.lockView.setPWSErrorTwiceDiffBlock = ^(NSString *pwd1,NSString *pwdNow){
        
        [self.label showWarnMsg:CoreLockPWDDiffTitle];
        
        self.navigationItem.rightBarButtonItem = self.resetItem;
    };
    
    /** 第一次输入密码：正确 */
    self.lockView.setPWFirstRightBlock = ^(){
      
        [self.label showNormalMsg:CoreLockPWDTitleConfirm];
    };
    
    /** 再次输入密码一致 */
    self.lockView.setPWTwiceSameBlock = ^(NSString *pwd){
      
        [self.label showNormalMsg:CoreLockPWSuccessTitle];
        
        //存储密码
        [CLLockVC setStr:pwd key:CoreLockPWDKey];
        
        //禁用交互
        self.view.userInteractionEnabled = NO;
        
        if(_successBlock != nil) _successBlock(self,pwd);
        
        if(CoreLockTypeModifyPwd == _type){
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(.5f * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                [self.navigationController popViewControllerAnimated:YES];
            });
        }
    };
    
    
    
    /*
     *  验证密码
     */
    
    /** 开始 */
    self.lockView.verifyPWBeginBlock = ^(){
        
        [self.label showNormalMsg:CoreLockVerifyNormalTitle];
    };
    
    /** 验证 */
    self.lockView.verifyPwdBlock = ^(NSString *pwd)
    {
        //取出本地密码
        NSString *pwdLocal = [CLLockVC strForKey:CoreLockPWDKey];
        
        BOOL res = [pwdLocal isEqualToString:pwd];
        
        if(res)
        {
            //密码一致
            [self.label showNormalMsg:CoreLockVerifySuccesslTitle];
            
            if(CoreLockTypeVeryfiPwd == _type)
            {
                //禁用交互
                self.view.userInteractionEnabled = NO;
                
            }
            else if (CoreLockTypeModifyPwd == _type)
            {
                //修改密码
                [self.label showNormalMsg:CoreLockPWDTitleFirst];
                self.modifyCurrentTitle = CoreLockPWDTitleFirst;
            }
            
            if(CoreLockTypeVeryfiPwd == _type)
            {
                if(_successBlock != nil) _successBlock(self,pwd);
            }
        }
        else
        {
            if(_errorCount >= _errorLimit-1){
                //禁用交互
                self.lockView.userInteractionEnabled = NO;
                //密码错误次数达到上限
                [self.label showWarnMsg:CoreLockVerifyErrorLimitTitle];
                
                if(_achieveErrorLimitBlock != nil) _achieveErrorLimitBlock(self);
                
//                dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
//                    // 耗时的操作
//                    BOOL loop = YES;
//                    NSInteger count = _errorWaitSecond;
//                    while (loop) {
//                        
//                        dispatch_async(dispatch_get_main_queue(), ^{
//                            // 更新界面
//                            [self.label showNormalMsg:[NSString stringWithFormat:@"请于%d秒后重试",count]];
//                        });
//                        
//                        [NSThread sleepForTimeInterval:1];
//                        
//                        count--;
//                        if(count <= 0){
//                            loop = NO;
//                        }
//                    }
//
//                    
//                    dispatch_async(dispatch_get_main_queue(), ^{
//                        // 更新界面
//                        [self.label showNormalMsg:CoreLockPWDTitleFirst];
//                        self.lockView.userInteractionEnabled = YES;
//                        _errorCount = 0;
//                    });
//                });
                
                
                
                return res;
            }
            
            _errorCount++;
            //密码不一致
//            [self.label showWarnMsg:CoreLockVerifyErrorPwdTitle];
            [self.label showWarnMsg:[NSString stringWithFormat:@"密码错误，你还可以再输入%ld次",_errorLimit-_errorCount]];
        }
        
        return res;
    };
    
    
    
    /*
     *  修改
     */
    
    /** 开始 */
    self.lockView.modifyPwdBlock =^(){
      
        [self.label showNormalMsg:self.modifyCurrentTitle];
    };
    
    
}






/*
 *  数据传输
 */
-(void)dataTransfer{
    
    [self.label showNormalMsg:self.msg];
    
    //传递类型
    self.lockView.type = self.type;
}







/*
 *  控制器准备
 */
-(void)vcPrepare{
    
    //设置背景色
    self.view.backgroundColor = CoreLockViewBgColor;
//    [self.navigationController.view setBackgroundColor:[UIColor redColor]];
//    self.navigationController.navigationBar.barTintColor = [UIColor redColor];
    
    //初始情况隐藏
    self.navigationItem.rightBarButtonItem = nil;
    
    self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"" style:UIBarButtonItemStylePlain target:nil action:nil];
    
    //默认标题
    self.modifyCurrentTitle = CoreLockModifyNormalTitle;
    
    if(CoreLockTypeModifyPwd == _type||CoreLockTypeSetPwd ==_type) {
        
        _actionView.hidden = YES;
        
        [_actionView removeFromSuperview];

        if(_isDirectModify) return; 
        
        if(_isShowNavClose){
            
            UIButton *leftButton = [self customBarItemButton:@"关闭"
                                                          sel:@selector(dismiss)];
            
            self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:leftButton];
        }
    }
    
    if(![self.class hasPwd]){
        [_modifyBtn removeFromSuperview];
    }
}

-(void)dismiss{
    [self dismiss:0];
}



/*
 *  密码重设
 */
-(void)setPwdReset{
    
    [self.label showNormalMsg:CoreLockPWDTitleFirst];
    
    //隐藏
    self.navigationItem.rightBarButtonItem = nil;
    
    //通知视图重设
    [self.lockView resetPwd];
}


/*
 *  忘记密码
 */
-(void)forgetPwd{
    
}



/*
 *  修改密码
 */
-(void)modiftyPwd{
    
}








/*
 *  是否有本地密码缓存？即用户是否设置过初始密码？
 */
+(BOOL)hasPwd{
    
    NSString *pwd = [CLLockVC strForKey:CoreLockPWDKey];
    
    return pwd !=nil;
}




/*
 *  展示设置密码控制器
 */
+(instancetype)showSettingLockVCInVC:(UIViewController *)vc
                        successBlock:(void(^)(CLLockVC *lockVC,NSString *pwd))successBlock
                      isShowNavClose:(BOOL)isShowNavClose
{
    
    CLLockVC *lockVC = [self lockVC:vc];
    lockVC.isShowNavClose = isShowNavClose;
    
    lockVC.title = @"设置手势密码";
    
    //设置类型
    lockVC.type = CoreLockTypeSetPwd;
    
    //保存block
    lockVC.successBlock = successBlock;
    
    return lockVC;
}




/*
 *  展示验证密码输入框
 */
+(instancetype)showVerifyLockVCInVC:(UIViewController *)vc
                     forgetPwdBlock:(void(^)(CLLockVC *lockVC))forgetPwdBlock
                       successBlock:(void(^)(CLLockVC *lockVC, NSString *pwd))successBlock
                         errorLimit:(NSInteger)errorLimit
                    achieveErrorLimitBlock:(void(^)(CLLockVC *lockVC))achieveErrorLimitBlock
{
    
    CLLockVC *lockVC = [self lockVC:vc];
    lockVC.errorLimit = errorLimit;
    lockVC.errorCount = 0;
    lockVC.achieveErrorLimitBlock = achieveErrorLimitBlock;
    
    lockVC.title = @"手势解锁";
    
    //设置类型
    lockVC.type = CoreLockTypeVeryfiPwd;
    
    //保存block
    lockVC.successBlock = successBlock;
    lockVC.forgetPwdBlock = forgetPwdBlock;
    
    return lockVC;
}




/*
 *  展示验证密码输入框
 */
+(instancetype)showModifyLockVCInVC:(UIViewController *)vc successBlock:(void(^)(CLLockVC *lockVC, NSString *pwd))successBlock{
    
    CLLockVC *lockVC = [self lockVC:vc];
    
    lockVC.title = @"修改密码";
    
    //设置类型
    lockVC.type = CoreLockTypeModifyPwd;
    
    //记录
    lockVC.successBlock = successBlock;
    
    return lockVC;
}





+(instancetype)lockVC:(UIViewController *)vc{
    
    CLLockVC *lockVC = [[CLLockVC alloc] init];

    lockVC.vc = vc;
    
    CLLockNavVC *navVC = [[CLLockNavVC alloc] initWithRootViewController:lockVC];
    
    [vc presentViewController:navVC animated:YES completion:nil];
    
    return lockVC;
}



-(void)setType:(CoreLockType)type{
    
    _type = type;
    
    //根据type自动调整label文字
    [self labelWithType];
}



/*
 *  根据type自动调整label文字
 */
-(void)labelWithType{
    
    if(CoreLockTypeSetPwd == _type){//设置密码
        
        self.msg = CoreLockPWDTitleFirst;
        
    }else if (CoreLockTypeVeryfiPwd == _type){//验证密码
        
        self.msg = CoreLockVerifyNormalTitle;
        
    }else if (CoreLockTypeModifyPwd == _type){//修改密码
        
        self.msg = CoreLockModifyNormalTitle;
    }
}


/*
 *  消失
 */
-(void)dismiss:(NSTimeInterval)interval{
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(interval * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [self dismissViewControllerAnimated:YES completion:^{
            if ([CityCodeVersion isNanJing]) {
                [[NSNotificationCenter defaultCenter] postNotificationName:@"Dismiss" object:nil];
            }else if ([CityCodeVersion isTianJin]){
                //天津新增约看时---处理收到约看推送时跳转到约看列表
                NSInteger intNum = [[CommonMethod getUserdefaultWithKey:AddTakingSeeRemind] integerValue];
                if (intNum == 1) {
                    [[NSNotificationCenter defaultCenter] postNotificationName:@"HaveDismiss" object:nil];
                }

            }
        }];
    });
}

- (void)dismissNow{
    [self dismissViewControllerAnimated:YES completion:nil];
}


/*
 *  重置
 */
-(UIBarButtonItem *)resetItem{
    
    if(_resetItem == nil){
        //添加右按钮
//        _resetItem= [[UIBarButtonItem alloc] initWithTitle:@"重设" style:UIBarButtonItemStylePlain target:self action:@selector(setPwdReset)];
        UIButton *rightButton = [self customBarItemButton:@"重设"
                                                      sel:@selector(setPwdReset)];
        
        _resetItem = [[UIBarButtonItem alloc]initWithCustomView:rightButton];
    }
    
    return _resetItem;
    
}


- (UIButton *)customBarItemButton:(NSString *)title
                              sel:(SEL)sel {
    
    UIButton *customBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    UIFont *font = [UIFont fontWithName:FontName
                                   size:15.0];
    
    CGFloat titleWidth = [title getStringWidth:[UIFont fontWithName:FontName
                                                               size:15.0]
                                        Height:44
                                          size:15.0];
    
    if (!title ||
        [title isEqualToString:@""]) {
        
        titleWidth = 45;
    }
    [customBtn setFrame:CGRectMake(0, 0, titleWidth, 44)];
    [customBtn setBackgroundColor:[UIColor clearColor]];
    [customBtn setTitleShadowColor:[UIColor whiteColor]
                          forState:UIControlStateNormal];
    customBtn.titleLabel.textAlignment = NSTextAlignmentRight;
    
    
    if (title) {
        
        [customBtn setTitle:title forState:UIControlStateNormal];
    }
    
    [customBtn.titleLabel setFont:font];
    [customBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    
    if (sel) {
        [customBtn addTarget:self action:sel forControlEvents:UIControlEventTouchUpInside];
    }
    
    return customBtn;
}



- (IBAction)forgetPwdAction:(id)sender {

//    [self dismiss:0];
    if(_forgetPwdBlock != nil) _forgetPwdBlock(self);
}


- (IBAction)modifyPwdAction:(id)sender {
    
    CLLockVC *lockVC = [[CLLockVC alloc] init];
    lockVC.errorLimit = _errorLimit;
    
    lockVC.title = @"修改密码";
    
    lockVC.isDirectModify = YES;
    
    //设置类型
    lockVC.type = CoreLockTypeModifyPwd;
    
    [self.navigationController pushViewController:lockVC animated:YES];
}




//保存普通对象
+(void)setStr:(NSString *)str key:(NSString *)key{
    
    //获取preference
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    
    //保存
    [defaults setObject:str forKey:key];
    
    //立即同步
    [defaults synchronize];
    
}

//读取
+(NSString *)strForKey:(NSString *)key{
    
    //获取preference
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    
    //读取
    NSString *str=(NSString *)[defaults objectForKey:key];
    
    return str;
    
}

/*
 *  清空手势密码
 */
+ (void)clearCoreLockPWDKey
{
    [CommonMethod setUserdefaultWithValue:nil forKey:CoreLockPWDKey];
}


-(void)resetValidPwd
{
    [self.label showNormalMsg:CoreLockVerifyNormalTitle];
    self.lockView.userInteractionEnabled = YES;
    _errorCount = 0;
}


-(void)userInteractionDisEnabled
{
    self.lockView.userInteractionEnabled = NO;
}






@end
